{"version":3,"file":"static/js/494.32e97784.chunk.js","mappings":"kRAOMA,GAASC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAEdC,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2HA+FnB,EAtFqB,WAAO,IAAD,IAEfE,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAG,6CAAyCF,EAAzC,oBAFG,oCAIZ,GAA6BG,EAAAA,EAAAA,YAA7B,eAAOC,EAAP,KAAeC,EAAf,KAGMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAa7C,IATAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,sGACOC,MAAMV,GADb,cACVW,EADU,gBAEYA,EAASC,OAFrB,OAEVC,EAFU,OAGhBV,EAAUU,GAHM,2CAAH,qDAKjBJ,GACH,GAAE,CAACT,KAECE,EACD,OAAO,wCAGX,IAAQY,EAAuDZ,EAAvDY,MAAOC,EAAgDb,EAAhDa,YAAaC,EAAmCd,EAAnCc,aAAcC,EAAqBf,EAArBe,SAAUC,EAAWhB,EAAXgB,OACpD,OACI,iCACI,SAAC,KAAD,CAASC,GAAIf,EAAb,UACI,SAACX,EAAD,OAGJ,iBAAK2B,MAAO,CACRC,UAAW,GACXC,QAAS,QAFb,WAMI,0BACI,gBAAKC,UAAU,uBAAuBC,IAAG,yCAAoCT,GAAeU,IAAG,UAAKX,QAExG,iBAAKS,UAAU,wBAAf,WACI,eAAIA,UAAU,uBAAd,SAAsCT,KACtC,eAAGS,UAAU,0BAAb,yBAAoDP,MACpD,mBAEA,eAAIO,UAAU,uBAAd,uBACA,cAAGA,UAAU,0BAAb,SAAwCN,KACxC,mBAEA,eAAIM,UAAU,uBAAd,qBACA,wBACKL,EAAOQ,KAAI,SAACC,GAAD,OACR,wBAAoBA,EAAMC,MAAjBD,EAAM7B,GADP,OAIhB,yBAIR,4BACI,eAAIyB,UAAU,mCAAd,qCACA,gBAAIA,UAAU,8BAAd,WACI,eAAIA,UAAU,yCAAd,UACI,SAAC5B,EAAD,CAAewB,GAAE,kBAAarB,EAAb,SAAjB,qBAEJ,yBACI,SAACH,EAAD,CAAewB,GAAE,kBAAarB,EAAb,YAAjB,2BAGR,mBACA,SAAC,EAAA+B,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,WAKnB,C,sBC/FD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["pages/MovieDetails/MovieDetails.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { NavLink, Outlet } from \"react-router-dom\";\nimport { lazy, Suspense } from \"react\";\nimport styled from \"styled-components\"\nimport PropTypes from 'prop-types';\nimport \"./MovieDetails.css\"\nconst Button = lazy(() => import(\"../../components/Button/Button\"))\n\nconst StyledNavLink = styled(NavLink)`\n    color: black;\n    list-style-type: none;\n\n    &.active {\n        color: lightblue;\n    }\n`\n\nconst MovieDetails = () => {\n    const KEY = \"6cd416a210a971fc6ba2d58e4253069e\"\n    const { id } = useParams()\n    const URL = `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}`\n\n    const [movies, setMovies ] = useState()\n    \n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/movies\";\n\n    // console.log(backLinkHref)\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            const response = await fetch(URL)\n            const fetchedMovies = await response.json()\n            setMovies(fetchedMovies)\n        }\n        fetchMovies();\n    }, [URL])\n\n    if (!movies) {\n        return <div>Loading...</div>;\n    }\n\n    const { title, poster_path, vote_average, overview, genres } = movies\n    return(\n        <>\n            <NavLink to={backLinkHref}>\n                <Button/>\n            </NavLink>\n            \n            <div style={{\n                marginTop: 20,\n                display: 'flex'\n            }}>\n                \n                {/* Now showing movie with id - {id} */}\n                <div>\n                    <img className=\"movieDetails__poster\" src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={`${title}`} />\n                </div>\n                <div className=\"movieDetails__section\">\n                    <h3 className=\"movieDetails__header\">{title}</h3>\n                    <p className=\"movieDetails__paragraph\">User score: {vote_average}</p>\n                    <hr/>\n\n                    <h3 className=\"movieDetails__header\">Overview</h3>\n                    <p className=\"movieDetails__paragraph\">{overview}</p>\n                    <hr/>\n\n                    <h3 className=\"movieDetails__header\">Genres</h3>\n                    <ul>\n                        {genres.map((genre) => (\n                            <li key={genre.id}>{genre.name}</li>\n                        ))}\n                    </ul>\n                    <hr/>\n                </div>\n                \n            </div>\n            <div>\n                <h4 className=\"movieDetails__header--additional\">Additional information</h4>\n                <ul className=\"movieDetails__unlisted-list\">\n                    <li className=\"movieDetails__unlisted-list--list-item\">\n                        <StyledNavLink to={`/movies/${id}/cast`}>Cast</StyledNavLink>\n                    </li>\n                    <li>\n                        <StyledNavLink to={`/movies/${id}/reviews`}>Reviews</StyledNavLink>\n                    </li>\n                </ul>\n                <hr/>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Outlet/>\n                </Suspense>\n            </div>\n        </>\n    )\n}\n\nMovieDetails.propTypes = {\n    KEY: PropTypes.string,\n    URL: PropTypes.string,\n    id: PropTypes.number,\n    fetchMovies: PropTypes.func,\n}\n\nexport default MovieDetails","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Button","lazy","StyledNavLink","styled","NavLink","id","useParams","URL","useState","movies","setMovies","backLinkHref","useLocation","state","from","useEffect","fetchMovies","fetch","response","json","fetchedMovies","title","poster_path","vote_average","overview","genres","to","style","marginTop","display","className","src","alt","map","genre","name","Suspense","fallback","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}